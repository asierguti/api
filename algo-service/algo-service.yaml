openapi: 3.0.1
info:
  description: Algorithm service
  version: 1.0-0
  title: Algorithm service
tags:
  - name: algo
    description: algo processing
  - name: processing
    description: algo processing
servers:
  - url: 'http://algo.n-logic.ru:8089/algo-service/v1'
    description: sandbox
paths:
  '/algo/{algoID}/run':
    post:
      tags:
        - processing
      summary: run algo by algoID
      description: run algo by algoID
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: algoID
          description: algo id
          required: true
          schema:
            type: string
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputEntities'
      responses:
        '200':
          $ref: '#/components/responses/200AlgoResultLink'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
          
  '/algo/{algoID}/run-multi':
    post:
      tags:
        - processing
      summary: Add original HTML and converted DOCX files into system
      description: >-
        see:
        https://swagger.io/docs/specification/describing-request-body/multipart-requests/
      operationId: addFile
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: algoID
          description: algo id
          required: true
          schema:
            type: string
          example: 1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RunAlgo'
      responses:
        '200':
          $ref: '#/components/responses/200AlgoResultLink'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
          
  '/algo/{algoID}/run-tags':
    post:
      tags:
        - processing
      summary: run algo by algoID
      description: run algo by algoID
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: algoID
          description: algo id
          required: true
          schema:
            type: string
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputEntities'
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: string
                example: <p></p>
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
  '/algo/clientID/{clientID}/entities/{entitiesList}':
    get:
      tags:
        - processing
      summary: get algos by entities filter
      description: gets all client's algos by etitites filter
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: clientID
          description: client id
          required: true
          schema:
            type: string
          example: 1
        - in: path
          name: entitiesList
          description: entities string list
          required: true
          schema:
            type: string
          example: 'text1,text2,text3'
      responses:
        '200':
          $ref: '#/components/responses/200AlgoID'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
  # '/algo/clientID/{clientID}/entities/doc-types':
  #   get:
  #     tags:
  #       - processing
  #     summary: get algos main blocks entities
  #     description: get algos main blocks entities
  #     parameters:
  #       - $ref: '#/components/parameters/X-REQUEST-ID'
  #       - $ref: '#/components/parameters/X-SERVICE-NAME'
  #       - in: path
  #         name: clientID
  #         description: client id
  #         required: true
  #         schema:
  #           type: string
  #         example: 1
  #     responses:
  #       '200':
  #         $ref: '#/components/responses/200Entityies'
  #       4XX:
  #         $ref: '#/components/responses/4XX'
  #       5XX:
  #         $ref: '#/components/responses/5XX'
  '/algo/{algoID}':
    get:
      tags:
        - algo
      summary: gets algo rules
      description: gets algo rules
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: algoID
          description: algo id
          required: true
          schema:
            type: string
          example: 1
      responses:
        '200':
          $ref: '#/components/responses/200AlgoData'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
    delete:
      tags:
        - algo
      summary: deletes algo
      description: deletes algo
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: algoID
          description: algo id
          required: true
          schema:
            type: string
          example: 1
      responses:
        '204':
          $ref: '#/components/responses/204'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
  '/algo/{algoID}/blocks':
    get:
      tags:
        - algo
      summary: gets algo blocks
      description: gets algo blocks
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: algoID
          description: algo id
          required: true
          schema:
            type: string
          example: 1
      responses:
        '200':
          $ref: '#/components/responses/200AlgoBlocks'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - algo
      summary: creates algo blocks lists
      description: creates algo blocks lists
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: algoID
          description: alog id
          required: true
          schema:
            type: string
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blocks'
      responses:
        '204':
          $ref: '#/components/responses/204'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
  '/algo/clientID/{clientID}':
    get:
      tags:
        - algo
      summary: gets all algos
      description: gets all client's algos
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: clientID
          description: client id
          required: true
          schema:
            type: string
          example: 1
      responses:
        '200':
          $ref: '#/components/responses/200AlgoesList'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - algo
      summary: creates an empty algo
      description: creates an empty algo for client
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: clientID
          description: client id
          required: true
          schema:
            type: string
          example: 1
      responses:
        '200':
          $ref: '#/components/responses/200AlgoID'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
  '/algo/{algoID}/check':
    post:
      tags:
        - algo
      summary: creates algo check block
      description: creates algo check block
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: algoID
          description: alog id
          required: true
          schema:
            type: string
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Check'
      responses:
        '204':
          $ref: '#/components/responses/204'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
  '/algo/{algoID}/check/{checkID}':
    get:
      tags:
        - algo
      summary: gets check data
      description: gets check data. Use main as checkID for main block
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: algoID
          description: alog id
          required: true
          schema:
            type: string
          example: 1
        - in: path
          name: checkID
          description: check ID
          required: true
          schema:
            type: string
          example: 1
      responses:
        '200':
          $ref: '#/components/responses/200CheckData'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
    post:
      tags:
        - algo
      summary: updates check entities
      description: updates check entities
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: algoID
          description: alog id
          required: true
          schema:
            type: string
          example: 1
        - in: path
          name: checkID
          description: check algo block ID. Set 'main' for main check block
          required: true
          schema:
            type: string
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Check'
      responses:
        '204':
          $ref: '#/components/responses/204'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
    delete:
      tags:
        - algo
      summary: deletes check data
      description: deletes check data
      parameters:
        - $ref: '#/components/parameters/X-REQUEST-ID'
        - $ref: '#/components/parameters/X-SERVICE-NAME'
        - in: path
          name: algoID
          description: alog id
          required: true
          schema:
            type: string
          example: 1
        - in: path
          name: checkID
          description: check ID
          required: true
          schema:
            type: string
          example: 1
      responses:
        '204':
          $ref: '#/components/responses/204'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
components:
  schemas:
    EntityOptions:
      type: object
      properties:
        defaultValue:
          type: string
          format: string
          default: ''
        compares:
          type: array
          items:
            type: object
            properties:
              rule:
                type: string
                enum:
                  - ''
                  - совпадает
                  - не совпадает
                  - больше
                  - меньше
                  - содержит
                default: ''
              value:
                type: string
                format: string
                default: ''
    Entity:
      type: object
      properties:
        name:
          type: string
          format: string
          default: test
        position:
          type: integer
          default: 1
        options:
          $ref: '#/components/schemas/EntityOptions'
    EntitiesList:
      type: object
      properties:
        name:
          type: string
          format: string
          default: test
    InputEntities:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            default: ''
          value:
            type: string
            default: ''
    BlockRecord:
      type: object
      properties:
        blockID:
          type: integer
          default: 1
        row:
          type: integer
          default: 0
        colomn:
          type: integer
          default: 0
        list-options:
          type: object
          properties:
            type:
              type: string
              enum:
                - numeric
                - symbolic
            delimeter:
              type: string
              default: .
            start-from:
              type: string
              default: '1'
    Blocks:
      type: object
      properties:
        algoID:
          type: integer
          default: 1
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/BlockRecord'
    BlockRecordFullInfo:
      type: object
      properties:
        blockID:
          type: integer
          default: 1
        row:
          type: integer
          default: 0
        colomn:
          type: integer
          default: 0
        text:
          type: string
          default: ''
        entities:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                default: ''
              char-from:
                type: integer
                default: 0
              char-to:
                type: integer
                default: 0
              default-value:
                type: string
                default: ''
        list-options:
          type: object
          properties:
            type:
              type: string
              enum:
                - numeric
                - symbolic
            delimeter:
              type: string
              default: .
            start-from:
              type: string
              default: '1'
    BlocksFullInfo:
      type: object
      properties:
        algoID:
          type: integer
          default: 1
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/BlockRecordFullInfo'
    Check:
      type: object
      properties:
        id:
          type: integer
          default: 1
        position:
          type: integer
          default: 1
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        addsBlocks:
          type: array
          items:
            type: object
            properties:
              blockID:
                type: integer
                default: 1
                description: blockID
              row:
                type: integer
                default: 0
              colomn:
                type: integer
                default: 0
        removesBlocks:
          type: array
          items:
            type: object
            properties:
              blockID:
                type: integer
                default: 1
                description: blockID
              row:
                type: integer
                default: 0
              colomn:
                type: integer
                default: 0
    Algo:
      type: object
      properties:
        id:
          type: integer
          default: 1
        description:
          type: string
          default: ''
        checks:
          type: array
          items:
            $ref: '#/components/schemas/Check'
    AlgoesList:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            default: 1
          description:
            type: string
            default: ''
          checks:
            type: array
            items:
              $ref: '#/components/schemas/Check'
    AlgoID:
      type: object
      properties:
        algoID:
          type: integer
          format: int32
          example: 1
          
    RunAlgo:
      type: object
      properties:
        properties:
          type: object
          properties:
            requestID:
              type: string
              format: uuid
              example: "eb5ddb60-846f-48d1-a423-60af3ee79d5a"
            userID:
              type: string
              example: 1
            clientID:
              type: string
              example: 1
            dialogID:
              type: string
              example: "eb5ddb60-846f-48d1-a423-60af3ee79d5a"
        entities:
          type: array
          items:
            type: object
            properties:
              name:
                type: array
                items:
                  type: object
                  properties:
                    span:
                      type : array
                      items:
                        type: integer
                    value:
                      type: string

    Error:
      type: object
      properties:
        error:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          example: 1
        message:
          type: string
  parameters:
    X-REQUEST-ID:
      name: X-REQUEST-ID
      in: header
      schema:
        type: string
        format: uuid
      required: true
      example: eb5ddb60-846f-48d1-a423-60af3ee79d5a
    X-SERVICE-NAME:
      name: X-SERVICE-NAME
      in: header
      schema:
        type: string
      required: true
      example: test
  responses:
    '200':
      description: Ok
    '204':
      description: No Content
    200AlgoBlocks:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlocksFullInfo'
    200EntityData:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Entity'
    200Entityies:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntitiesList'
    200AlgoData:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Algo'
    200AlgoesList:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlgoesList'
    200AlgoResultLink:
      description: Ok
      content:
        application/json:
          schema:
            type: object
            properties:
              downloadLink:
                type: string
                format: uri
                example: >-
                  http://doc-service.n-logic.ru:10001/doc-service/v1/doc/eb5ddb60-846f-48d1-a423-60af3ee79d5a
    200AlgoID:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlgoID'
    200CheckData:
      description: Ok
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Check'
    4XX:
      description: Some Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: 4XX
            message: error description
    5XX:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: 5XX
            message: unexpected error